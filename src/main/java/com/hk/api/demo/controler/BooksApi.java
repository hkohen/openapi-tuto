/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hk.api.demo.controler;

import com.hk.api.demo.dto.BookDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-08T12:50:22.051983200+01:00[Europe/Paris]")
@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /books/create
     * Operation to create a book
     *
     * @param bookDto  (optional)
     * @return book created successfly (status code 201)
     */
    @ApiOperation(value = "", nickname = "booksCreatePost", notes = "Operation to create a book", response = BookDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "book created successfly", response = BookDto.class) })
    @PostMapping(
        value = "/books/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookDto> booksCreatePost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) BookDto bookDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"title\" : \"book\", \"type\" : \"action\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/get/{id}
     *
     * @param id  (required)
     * @return success response (status code 200)
     */
    @ApiOperation(value = "", nickname = "booksGetIdGet", notes = "", response = BookDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success response", response = BookDto.class) })
    @GetMapping(
        value = "/books/get/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BookDto> booksGetIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"title\" : \"book\", \"type\" : \"action\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/getall
     *
     * @return success response (status code 200)
     */
    @ApiOperation(value = "", nickname = "booksGetallGet", notes = "", response = Object.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success response", response = Object.class, responseContainer = "List") })
    @GetMapping(
        value = "/books/getall",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Object>> booksGetallGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"{}\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/getall/startswith/{s}
     * operation to get a book by id
     *
     * @param s  (required)
     * @return Success response (status code 200)
     */
    @ApiOperation(value = "", nickname = "booksGetallStartswithSGet", notes = "operation to get a book by id", response = Object.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success response", response = Object.class, responseContainer = "List") })
    @GetMapping(
        value = "/books/getall/startswith/{s}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Object>> booksGetallStartswithSGet(@ApiParam(value = "",required=true) @PathVariable("s") String s) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"{}\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
